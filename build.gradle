apply plugin: 'java-library'

buildscript {
 repositories {
  mavenCentral()
  mavenLocal()
 }
 dependencies {
  classpath 'se.bjurr.gradle:gradle-scripts:2.+'
  classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.2.1'
 }
}
project.ext.buildConfig = [
  publishing: [
    relocate: [
      'com.google',
      'com.jakewharton'
    ]
  ],
  violations: [
    updateReadme: true
  ],
  staticCodeAnalysis: [
    maxViolations: 5
  ],
]
apply from: project.buildscript.classLoader.getResource('main.gradle').toURI()

/*
apply plugin: 'jsonschema2pojo'

// A bit ugly: https://github.com/joelittlejohn/jsonschema2pojo/issues/1594
[
//  [
//    from: "${rootDir}/src/main/resources/json/sarif-schema.json",
//    to: "se.bjurr.violations.lib.model.generated.sarif"
//  ],
//  [
//    from: "${rootDir}/src/main/resources/json/coverity-schema.json",
//    to: "se.bjurr.violations.lib.model.generated.coverity"
//  ]
].each { codeGen ->
  logger.lifecycle("Generating ${codeGen.from} to ${codeGen.to}")

  jsonSchema2Pojo {
    source = files(codeGen.from)
    targetDirectory = file("src/gen/java")
    targetPackage = codeGen.to
    generateBuilders = true
    annotationStyle = 'none'
    includeGeneratedAnnotation = false
    removeOldOutput = false
  }
}

spotlessJava.dependsOn generateJsonSchema2Pojo
sourcesJar.dependsOn generateJsonSchema2Pojo
javadocJar.dependsOn generateJsonSchema2Pojo
*/

dependencies {
 api 'com.google.code.gson:gson:2.10.1'

 testImplementation 'junit:junit:4.13.2'
 testImplementation 'org.assertj:assertj-core:3.25.3'
 testImplementation 'uk.co.jemos.podam:podam:8.0.1.RELEASE'
 testImplementation 'com.approvaltests:approvaltests:23.0.0'
 testImplementation 'com.networknt:json-schema-validator:1.4.0'
}
