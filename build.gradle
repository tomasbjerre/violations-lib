plugins {
	id "se.bjurr.gradle.bundle-jar" version "1.+"
	id "org.jsonschema2pojo" version "1.2.2" apply false
}

allprojects {
	sourceCompatibility = 11
	targetCompatibility = 11

	staticCodeAnalysisExtension {
		maxViolations.set(0)
	}
}

// A bit ugly: https://github.com/joelittlejohn/jsonschema2pojo/issues/1594
[
	[
		project: ":violations-lib-sarif",
		from: "${rootDir}/violations-lib/src/main/resources/jsonschemas/sarif-schema.json",
		to: "se.bjurr.violations.lib.model.generated.sarif"
	],
	[
		project: ":violations-lib-coverty",
		from: "${rootDir}/violations-lib/src/main/resources/jsonschemas/coverity-schema.json",
		to: "se.bjurr.violations.lib.model.generated.coverity"
	]
].each { codeGen ->
	project(codeGen.project) {
		apply plugin: 'jsonschema2pojo'
		def targetDir = "${rootProject.project(codeGen.project).projectDir}/src/gen/java"
		logger.lifecycle("Generating ${codeGen.from} to ${codeGen.to} in ${targetDir}")
		jsonSchema2Pojo {
			source = files(codeGen.from)
			targetDirectory = file(targetDir)
			targetPackage = codeGen.to
			generateBuilders = true
			annotationStyle = 'none'
			includeGeneratedAnnotation = false
			removeOldOutput = true
		}

		tasks.named("sourcesJar") {
			dependsOn(tasks.named("generateJsonSchema2Pojo"))
		}

		sourceSets {
			main {
				java.srcDir(targetDir)
			}
		}
	}
}


project(":violations-lib") {
	apply plugin: "se.bjurr.gradle.shadow"

	dependencies {
		api project(":violations-lib-sarif")
		api project(":violations-lib-coverty")
		api 'com.google.code.gson:gson:2.13.1'

		testImplementation 'junit:junit:4.13.2'
		testImplementation 'org.assertj:assertj-core:3.27.3'
		testImplementation 'uk.co.jemos.podam:podam:8.0.2.RELEASE'
		testImplementation 'com.approvaltests:approvaltests:24.22.0'
		testImplementation 'com.networknt:json-schema-validator:1.5.7'
	}

	shadowExtension {
		relocate.set("se:se,com.google")
	}
}
